# -*- mode: ruby -*-
# vi: set ft=ruby :

# Variables
var_box            = 'bento/oracle-7'
var_vm_name        = 'devops_vagrant_vm'
var_mem_size       = 8192   # #4092  # More would be better.
var_cpus           = 4 #2
var_non_rotational = 'on' # SSD
var_disk1_name      = 'D:/VM/boxes/devops_vm/devops-u01.vdi'
var_disk1_size      = 100
var_disk2_name      = 'D:/VM/boxes/devops_vm/docker-images.vdi'
var_disk2_size      = 150

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  if Vagrant.has_plugin?("vagrant-timezone")
    config.timezone.value = "America/Toronto"
  end
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = var_box

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 4443, host: 8444, id: 'awx_https'
  config.vm.network "forwarded_port", guest: 8090, host: 8090, id: 'awx_http'
  config.vm.network "forwarded_port", guest: 443, host: 8443, id: 'kdashboard_console_https'
  config.vm.network "forwarded_port", guest: 8001, host: 8082, id: 'kdashboard_console_http'
  config.vm.network "forwarded_port", guest: 6443, host: 6443, guest_ip: "10.0.2.15", id: 'k8_api_endpoint'
  config.vm.network "forwarded_port", guest: 8089, host: 8089, id: 'jenkins_http'
  # Akeyless
  config.vm.network "forwarded_port", guest: 8000, host: 8000, id: 'Akeyless Gateway Config Manager'
  config.vm.network "forwarded_port", guest: 18888, host: 18888, id: 'Akeyless Gateway Console'
  config.vm.network "forwarded_port", guest: 8200, host: 8200, id: 'Akeyless HashicorpVProxy'
  config.vm.network "forwarded_port", guest: 8080, host: 8080, id: 'Akeyless V1 REST API'
  config.vm.network "forwarded_port", guest: 8081, host: 8081, id: 'Akeyless V2 REST API'
  config.vm.network "forwarded_port", guest: 5696, host: 5696, id: 'KMIP Server'

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
   config.vm.network "private_network", ip: "192.168.56.30"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.memory = var_mem_size
    vb.cpus   = var_cpus
    vb.name   = var_vm_name

    vb.customize ['modifyvm', :id, '--nested-hw-virt', 'on']
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', '0', '--nonrotational', var_non_rotational]

    unless File.exist?(var_disk1_name)
      vb.customize ['createhd', '--filename', var_disk1_name, '--size', var_disk1_size * 1024]
    end
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_disk1_name]

    unless File.exist?(var_disk2_name)
      vb.customize ['createhd', '--filename', var_disk2_name, '--size', var_disk2_size * 1024]
    end
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_disk2_name]
 end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sh /vagrant/scripts/setup.sh
  SHELL
end
